#!/usr/bin/env bash

[[ -t 1 && -t 0 ]] || exit
LANG=C

getkey () {
  while read -rn1; do
    case $REPLY in
      [qQ]) exit ;;
      [wWKk]) key=UP; return ;;
      [aAHh]) key=LEFT; return ;;
      [sSJj]) key=DOWN; return ;;
      [dDLl]) key=RIGHT; return ;;
      [[:digit:]]) key=$REPLY; return ;;
      $'\e') ;;
      *) continue
    esac
    read -rn1
    [[ $REPLY = '[' ]] || continue
    read -rn1
    case $REPLY in
      A) key=UP; return ;;
      D) key=LEFT; return ;;
      B) key=DOWN; return ;;
      C) key=RIGHT; return ;;
    esac
  done
}


clear=$'\e[H\e[2J'
cup0=$'\e[H'

title='e.Do slider control'
header() {
  header=
  for (( i = 0; i < (lines - 14) / 2; i++ )); do
    header+=$'\n'
  done
  for (( i = 0; i < (cols - ${#title}) / 2; i++ )); do
    header+=' '
  done
  header+=$title$'\n\n'
}

prompt () {
  prompt=
  for (( i = 0; i < (cols - 4) / 2; i++ )); do
    prompt+=' '
  done
}

term () {
  cols=$(tput cols) lines=$(tput lines)
  (( range = (cols - 10) / 100 ))
  (( range = range > 0 ? range : 1 ))
  printf %s "$clear"

  header
  prompt
}

if (( BASH_VERSINFO[0] > 4 || (BASH_VERSINFO[0] == 4 && BASH_VERSINFO[1] >= 4 ) )); then
  trap 'term; draw' winch
fi

tput smcup; tput civis
stty -echo
trap 'tput rmcup; tput cnorm; stty sane' exit

cursor=$'\e[41m'
sliderbg=$'\e[42m'
reset=$'\e[m'

slider () {
  # todo: rewrite me please
  var=
  for (( i = 4; i < cols - 6; i++ )) do
    if (( (i - 4) * 101 > pos[$1] * (cols - 10) - (cols - 10) &&
          (i - 4) * 101 < pos[$1] * (cols - 10) + (cols - 10) )); then
      var+=C
    else
      var+=S
    fi
  done

  var=${var//CS/C>S}
  var=${var//SC/S<C}
  var=${var/#C/<C}
  var=${var/#S/>S}
  var=${var/%C/<C}
  var=${var/%S/>S}
  var=${var//[CS]/ }
  var=${var//>/$sliderbg}
  var=${var//</$cursor}

  var="  0 $var"
  var+="$reset 100  "
  printf "%s\\r" "$var"
}

term
cursor=$'\e[41m'

draw () {
  printf %s "$cup0" "$header"
  for s in {0..4}; do
    if (( s == slider )); then
      sliderbg=$'\e[42m'
    else
      sliderbg=$'\e[43m'
    fi
    slider "$s"
    echo
    printf '%*s\e[K\n' "$(( cols / 2 ))" "${pos[s]}"
  done

  s=5
  if (( s == slider )); then
    sliderbg=$'\e[42m'
  else
    sliderbg=$'\e[43m'
  fi
  slider "$s"
  echo
  printf '%*s\e[J\n' "$(( cols / 2 ))" "${pos[s]}"
}

pos=(50 50 50 50 50 50)

draw
while getkey; do
  change=0
  case $key in
     LEFT) (( pos[slider] = pos[slider] >   0 ? (change = 1, pos[slider] - 1) : pos[slider] )) ;;
    RIGHT) (( pos[slider] = pos[slider] < 100 ? (change = 1, pos[slider] + 1) : pos[slider] )) ;;
       UP) (( slider = slider > 0 ? (change = 1, slider - 1) : slider )) ;;
     DOWN) (( slider = slider < 5 ? (change = 1, slider + 1) : slider )) ;;
    [[:digit:]])
      stty sane
      tput cnorm
      read -e -i "$key" -p "$prompt"
      [[ $REPLY =~ ^[0-9]+$ ]] && (( 10#$REPLY >= 0 && 10#$REPLY <= 100 )) && pos[slider]=$((10#$REPLY))
      tput civis
      stty -echo
      change=1
  esac
  (( change )) && draw
done
